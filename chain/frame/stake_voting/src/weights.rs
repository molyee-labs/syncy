// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_multisig
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/multisig/src/weights.rs
// --template=.maintain/frame-weight-template.hbs
// --header=HEADER-APACHE2
// --raw

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_multisig.
pub trait WeightInfo {
	fn create(z: u32) -> Weight;
	fn vote() -> Weight;
	fn vote_and_execute() -> Weight;
	fn unvote() -> Weight;
	fn unvote_and_execute() -> Weight;
	fn unvote_last() -> Weight;
	fn execute() -> Weight;
	fn close() -> Weight;
	fn retain_asset(u: u32) -> Weight;
}

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct Weights<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for Weights<T> {
	fn create(z: u32, ) -> Weight {
		(39_655_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vote() -> Weight {
		(126_383_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn vote_and_execute() -> Weight {
		(195_207_000 as Weight)
			// Standard Error: 0
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn unvote() -> Weight {
		(106_709_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn unvote_and_execute() -> Weight {
		(149_602_000 as Weight)
			// Standard Error: 0
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn unvote_last() -> Weight {
		(72_965_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn execute() -> Weight {
		(131_781_000 as Weight)
			// Standard Error: 0
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn close() -> Weight {
		(72_769_000 as Weight)
			// Standard Error: 0
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn retain_asset(u: u32) -> Weight {
		let dbw = T::DbWeight::get();
		(77_670_000 as Weight)
			.saturating_add(dbw.reads((u * 2 + 1) as Weight))
			.saturating_add(dbw.writes(u as Weight))
	}
}
